version: 2.1

orbs:
  slack: circleci/slack@4.10.1

node_docker: &node_docker
  docker:
    - image: circleci/node:13.8.0
aws_docker: &aws_docker
  docker:
    - image: amazon/aws-cli
python_docker: &python_docker
  docker:
    - image: python:3.7-alpine3.11

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd ~/project
            .circleci/scripts/destroy_environment.sh << parameters.workflowID >>

jobs:
  build-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws_docker
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            .circleci/scripts/backend_deploy.sh ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            .circleci/scripts/frontend_deploy.sh ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            .circleci/scripts/add_ip_to_inventory.sh ${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    <<: *python_docker
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["13:72:9b:fa:e9:24:56:ec:ea:5c:e7:47:9d:71:9a:ea"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk --no-cache add sudo
            apk --no-cache add curl
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    <<: *node_docker
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
          no_output_timeout: 20m
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/71Pqn2xuhpMiyHqiAHw56V/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    <<: *aws_docker
    steps:
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: install Node and NPM
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install --assumeyes nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz ./dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    <<: *python_docker
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["13:72:9b:fa:e9:24:56:ec:ea:5c:e7:47:9d:71:9a:ea"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk --no-cache add sudo
            apk --no-cache add curl
            apk add --update ansible
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure

  smoke-test:
    <<: *aws_docker
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            yum -y install curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
