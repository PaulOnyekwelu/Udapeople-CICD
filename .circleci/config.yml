version: 2.1

orbs:
  slack: circleci/slack@4.10.1

node_docker: &node_docker
  docker:
    - image: circleci/node:13.8.0
aws_docker: &aws_docker
  docker:
    - image: amazon/aws-cli
python_docker: &python_docker
  docker:
    - image: python:3.7-alpine3.11

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd ~/project
            .circleci/scripts/destroy_environment.sh << parameters.workflowID >>

jobs:
  build-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *node_docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws_docker
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            .circleci/scripts/backend_deploy.sh ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            .circleci/scripts/frontend_deploy.sh ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            .circleci/scripts/add_ip_to_inventory.sh
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    <<: *python_docker
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["13:72:9b:fa:e9:24:56:ec:ea:5c:e7:47:9d:71:9a:ea"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk --no-cache add sudo
            apk --no-cache add curl
            apk add --update ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls -al
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    <<: *node_docker
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
          no_output_timeout: 20m
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/71Pqn2xuhpMiyHqiAHw56V/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    <<: *aws_docker
    steps:
      - run:
          name: Installing tar
          command: |
            yum -y update
            ym -y install tar gzip
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Python3
          command: |
            dnf install python3
            python3 -V
      - run:
          name: Install Ansible
          command: |
            yum -y install epel-repo
            yum -y update
            yum -y install ansible
      - run:
          name: install Node and NPM
          command: |
            yum install --assumeyes epel-release
            yum install --assumeyes nodejs
      - run:
          name: Install AWS CLI
          command: | 
            yum -y install tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP = aws ec2 describe-instances \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -cfvz artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - deploy-frontend
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # # - scan-backend:
      # #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
